{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30698,"isInternetEnabled":true,"language":"python","sourceType":"script","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [code]\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-05-22T00:33:37.362976Z\",\"iopub.execute_input\":\"2024-05-22T00:33:37.364471Z\",\"iopub.status.idle\":\"2024-05-22T00:33:37.408928Z\",\"shell.execute_reply.started\":\"2024-05-22T00:33:37.364402Z\",\"shell.execute_reply\":\"2024-05-22T00:33:37.407590Z\"}}\n\ndef str_to_timestamp(date_str: str) -> int:\n    \"\"\"\n    Convert a string date to a timestamp.\n\n    :param date_str: The string date.\n    :return: The timestamp.\n    \"\"\"\n    if \"EEST\" in date_str:\n        date_str = date_str.replace(\" EEST\", \" \")\n    if (\"EET\" in date_str):\n        date_str = date_str.replace(\" EET\", \" \")\n    date_str = date_str.rstrip()\n    timestamp = int(datetime.strptime(date_str, '%Y-%m-%d %H:%M:%S').timestamp() )\n\n    return timestamp\ndef timestamp_to_str(timestamp: int) -> str:\n    \"\"\"\n    Convert a timestamp to a string date.\n\n    :param timestamp: The timestamp.\n    :return: The string date.\n    \"\"\"\n    return datetime.fromtimestamp(timestamp).strftime('%Y-%m-%d %H:%M:%S')\ndef round_to_nearest_minute(timestamp: int) -> int:\n    quotient, remainder = divmod(timestamp, 60)\n    if remainder >= 30:\n        quotient += 1\n    return quotient * 60\n\n# %% [code]\n","metadata":{"_uuid":"74395036-2f4e-4723-a538-e40fbb5adcdb","_cell_guid":"c0b92ca5-e572-4620-879a-cf14c82bcd28","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]}]}